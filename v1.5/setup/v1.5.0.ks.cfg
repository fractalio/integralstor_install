%include /tmp/part-include
# IntegralSTOR
# platform=x86, AMD64, or Intel EM64T
# version=master

# Firewall configuration
firewall --disabled

# Install OS instead of upgrade
install
unsupported_hardware

# ksdevice=bootif

# Use network installation
url --url="http://192.168.1.150/netboot/distros/centos/7.4/x86_64/iso"
repo --name=extrasRepo --baseurl=http://192.168.1.150/netboot/distros/centos/7.4/x86_64/integralstor/v1.5.0/integralstor_repository

# Root password
rootpw --iscrypted $1$NdB3lmS6$oXH5W2QCg4d6syxgE1GTA0 

# System authorization information
auth  --useshadow  --passalgo=sha512

# Use text mode install
text

# System keyboard
keyboard us

# System language
lang en_US

# SELinux configuration
selinux --disabled

# Do not configure the X Window System
skipx

# Installation logging level
logging --level=info

# Reboot after installation
reboot --eject

# System timezone
timezone  Asia/Kolkata

#bootloader --append="net.ifnames=0 biosdevname=0 ipv6.disable=1"
# network  --bootproto=dhcp --onboot=no 

%pre --log=/root/ks-pre.log

exec < /dev/tty3 > /dev/tty3 2>&1
/bin/chvt 3

#!/bin/sh
DIR="/sys/block"
MAXBOOTSIZE=300
MINBOOTSIZE=1
PATH="/dev"
#PATH="/bin:/sbin:/usr/bin:/usr/sbin"

### asking user for hardware specific entry ###
read -p "(optional) Enter hardware vendor else press <ENTER>:" vend

if [[ -n "$vend" ]]; then
  echo { \"platform\": \"integralstor\", > /tmp/platform
  echo \"hardware_vendor\" : \"$vend\" } >> /tmp/platform
  echo "hardware_vendor:$vend" > /tmp/hardware_vendor
  echo "Entered vendor is: $vend" 
else
  echo { \"platform\": \"integralstor\" } > /tmp/platform
  echo "hardware_vendor:" > /tmp/hardware_vendor
  echo "platform is 'integralstor'" 
fi


### Running a for loop on Disks available among one will be selected by user/admin for OS to Install ###
DISKS=`/usr/bin/lsblk -d -e 11,1 | /usr/bin/grep sd | /usr/bin/awk '{print $1}'`
echo
echo "Available disks and their size:"
for DEV in ${DISKS[@]} ; do
  if [ -b "/dev/$DEV" ] ; then
    SIZE=`/usr/bin/cat /sys/block/$DEV/size`
    GB=$(($SIZE/2**21))
    printf "%s:%d|\t\t" $DEV $GB
    #echo "   "$DEV"             "$GB"GB" 
   fi
done

echo
echo "Available disks to install Operating System and their size:"
for DEV in ${DISKS[@]} ; do
  if [ -b "/dev/$DEV" ] ; then
    SIZE=`/usr/bin/cat $DIR/$DEV/size`
    GB=$(($SIZE/2**21))
    if [ "$GB" -le "$MAXBOOTSIZE" ]
        then
            if [ "$GB" -ge "$MINBOOTSIZE" ]
                then
                device=$DEV
    		printf "%s:%d|\t\t" $device $GB
                #echo "   "$device"              "$GB"GB" 
            fi
    fi
  fi
done

echo
echo "(NOTE: Make sure that you have inserted two disks of same size to mirror the OS (To exit Press Ctrl+Alt+Del))" 

while true; do
  read -p "Do you want to mirror the operating system drive? (y/n):" input
  case $input in
    [yY] )
        read -p "Select the first mirrored OS drive (eg. sda):" bootdevice1
        read -p "Select the second mirrored OS drive (eg. sdb):" bootdevice2
          size1=`/usr/bin/cat $DIR/$bootdevice1/size`
          size2=`/usr/bin/cat $DIR/$bootdevice2/size`
            if [[ "$size1" == "$size2" ]] ; then
              read -p "Select the swap size in MB.[Eg. 16384(for 8GB) OR 32768(for 16GB)]:" swsize1
              echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
              echo "bootloader --location=mbr --driveorder=$bootdevice1,$bootdevice2" >> /tmp/part-include
              echo "zerombr" >> /tmp/part-include

              # final raid configurations
                while true; do
                 read -p "Do you want custom partitions? (y/n):" cust_part
                 case $cust_part in
                  [yY] )
           	   read -p "Enter partition size for 'boot' 'root' 'tmp' 'opt' 'var' in MB[use space while entering values]:" boot root tmp opt var
                   /bin/sleep 1
                   echo "part raid.11    --size $boot    --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.12    --size $root	 --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.13    --size $tmp     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.14    --size $opt                     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.15    --size $var                     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.16    --size $swsize1                 --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.21    --size $boot    --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.22    --size $root	 --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.23    --size $tmp	 --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.24    --size $opt                     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.25    --size $var        	         --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.26    --size $swsize1                 --ondrive=$bootdevice2" >> /tmp/part-include
                   # You can add --spares=x  
                   echo "raid /boot      --fstype ext4   --device md0    --level=RAID1 raid.11 raid.21" >> /tmp/part-include
                   echo "raid /          --fstype ext4   --device md1    --level=RAID1 raid.12 raid.22" >> /tmp/part-include
                   echo "raid /tmp       --fstype ext4   --device md2    --level=RAID1 raid.13 raid.23" >> /tmp/part-include
                   echo "raid /opt       --fstype ext4   --device md3    --level=RAID1 raid.14 raid.24" >> /tmp/part-include
                   echo "raid /var       --fstype ext4   --device md4    --level=RAID1 raid.15 raid.25" >> /tmp/part-include
                   echo "raid swap       --fstype swap   --device md5    --level=RAID1 raid.16 raid.26" >> /tmp/part-include
                   echo "Committed partition sizes: boot=$boot MB, root=$root MB, tmp=$tmp MB, opt=$opt MB, var=$var MB, swap=$swsize1 MB"
                   /bin/sleep 1
                   break;;
                  [nN] )
                   echo "Using default values for partition..."
                   # final raid configurations
                   echo "part raid.11    --size 1024     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.12    --size 10240	 --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.13    --size 5120     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.14    --size 10240                    --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.15    --size 20480                    --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.16    --size $swsize1                 --ondrive=$bootdevice1" >> /tmp/part-include
                   echo "part raid.21    --size 1024     --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.22    --size 10240	 --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.23    --size 5120	 --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.24    --size 10240                    --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.25    --size 20480        	         --ondrive=$bootdevice2" >> /tmp/part-include
                   echo "part raid.26    --size $swsize1                 --ondrive=$bootdevice2" >> /tmp/part-include
                   # You can add --spares=x  
                   echo "raid /boot      --fstype ext4   --device md0    --level=RAID1 raid.11 raid.21" >> /tmp/part-include
                   echo "raid /          --fstype ext4   --device md1    --level=RAID1 raid.12 raid.22" >> /tmp/part-include
                   echo "raid /tmp       --fstype ext4   --device md2    --level=RAID1 raid.13 raid.23" >> /tmp/part-include
                   echo "raid /opt       --fstype ext4   --device md3    --level=RAID1 raid.14 raid.24" >> /tmp/part-include
                   echo "raid /var       --fstype ext4   --device md4    --level=RAID1 raid.15 raid.25" >> /tmp/part-include
                   echo "raid swap       --fstype swap   --device md6    --level=RAID1 raid.16 raid.26" >> /tmp/part-include
                   echo "Committed partition sizes: boot=$1024 MB, root=10240 MB, tmp=5120 MB, opt=10240 MB, var=20480 MB, swap=$swsize1 MB"
                   /bin/sleep 1
                   break;;                      
                  * ) echo "Please answer yes(y) or no(n) to continue...";;
                 esac
                done
                while true; do
                  read -p "Do you want to clear the partitions of all disks? (y/n):" partselect1
                  case $partselect1 in
                    [yY] )  echo "clearpart --all" >> /tmp/part-include; break;;
                    [nN] )  echo "clearpart --drives=$bootdevice1,$bootdevice2 --all" >> /tmp/part-include; break;;
                    * ) echo "Please answer yes(y) or no(n) to continue...";;
                  esac
                done
            else
              echo "Error occured!!! found different size disks can't mirror OS. Exiting..."
	      /bin/sleep 1
            fi
            break;;
    [nN] )

        read -p "Select the boot device (eg. sda):" bootdevice1
        read -p "Select the swap size in MB.[Eg. 16384(for 8GB) OR 32768(for 16GB)]:" swsize2
        echo "zerombr" >> /tmp/part-include
        echo "#partitioning scheme generated in %pre for 3 drives" >> /tmp/part-include
        echo "bootloader --append="crashkernel=auto net.ifnames=0 biosdevname=0 ipv6.disable=1" --location=mbr --boot-drive=$bootdevice1" >>/tmp/part-include
        echo "bootloader --append="crashkernel=auto net.ifnames=0 biosdevname=0 ipv6.disable=1" --location=mbr --boot-drive=$bootdevice1"

        while true; do
          read -p "Do you want to clear prtitions of all disks? (y/n):" partselect2
          case $partselect2 in
            [yY] )  echo "clearpart --all" >> /tmp/part-include; break;;
            [nN] )  echo "clearpart --drives=$bootdevice1 --all" >> /tmp/part-include; echo "clearpart --drives=$bootdevice1 --all"; break;;
            * ) echo "Please answer yes(y) or no(n) to continue...";;
          esac
        done

        while true; do
         read -p "Do you want custom partitions? (y/n):" cust_part
         case $cust_part in
          [yY] )
           read -p "Enter partition size for 'boot' 'root' 'tmp' 'opt' 'var' in MB[use space while entering values]:" boot root tmp opt var
           # final boot partitions
           echo "part /boot 	--fstype xfs --size $boot 	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part / 	--fstype xfs --size $root 	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part /var 	--fstype xfs --size $var 	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part /opt 	--fstype xfs --size $opt 	--ondisk $bootdevice1" >> /tmp/part-include
           echo "part /tmp 	--fstype xfs --size $tmp 	--ondisk $bootdevice1" >> /tmp/part-include
           echo "part swap 	--fstype swap --size $swsize2 	--ondisk $bootdevice1" >> /tmp/part-include
           echo "Committed partition sizes: boot=$boot MB, root=$root MB, tmp=$tmp MB, opt=$opt MB, var=$var MB, swap=$swsize2"
           /bin/sleep 1
           break;;
          [nN] )
           echo "Using default values for partition..."
           # final boot partitions
           echo "part /boot 	--fstype xfs --size 1024 	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part / 	--fstype xfs --size 10240 	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part /var 	--fstype xfs --size 20480	--asprimary --ondisk $bootdevice1" >> /tmp/part-include
           echo "part /opt 	--fstype xfs --size 10240 	--ondisk $bootdevice1" >> /tmp/part-include
           echo "part /tmp 	--fstype xfs --size 5120 	--ondisk $bootdevice1" >> /tmp/part-include
           echo "part swap 	--fstype swap --size $swsize2 	--ondisk $bootdevice1" >> /tmp/part-include
	   echo "Committed partition sizes: boot=1024 MB, tmp=5120 MB, opt=10240 MB, root=10240 MB, var=20480 MB, swap=$swsize2"
           /bin/sleep 1
           break;;                      
          * ) echo "Please answer yes(y) or no(n) to continue...";;
         esac
        done
        break;;
    * ) echo "Please answer yes(y) or no(n) to continue...";;
    esac
done

/bin/chvt 1

%end

### Package Section ###
%packages --ignoremissing
@core
@Compatibility libraries

### global packages section needed in default.
yum-utils
wget
sg3_utils
perl-Config-General
scsi-target-utils
nfs-utils
smartmontools
samba-client
samba
samba-winbind
samba-winbind-clients
ipmitool
OpenIPMI
zfs
krb5-workstation
python-setuptools
python-pip
ypbind
ypserv
ntp
uwsgi
nginx
kexec-tools
python-devel
gcc
vsftpd
xinetd
shellinabox
urbackup-server
bind-utils
rsync
telnet
vim-enhanced
iptraf-ng
gd-devel
net-snmp
openssl-devel
pytz
tzdata
fio
iftop
iperf3
inotify-tools
logwatch

%end

%post --nochroot --log=/mnt/sysimage/root/ks-post-nochroot.log
cp -rf /tmp/platform /mnt/sysimage/root
cp -rf /tmp/hardware_vendor /mnt/sysimage/root
%end
%post --log=/root/ks-post-chroot.log


### integralstor post install###
cd /tmp
echo ""
echo "Setting up integralstor"
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/7.4/x86_64/integralstor/v1.5.0/setup/v1.5.0.setup_integralstor.sh
/bin/bash v1.5.0.setup_integralstor.sh
echo "Setting up integralstor...Done"

%end
